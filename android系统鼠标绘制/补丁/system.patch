diff --git a/device/rockchip/rksdk/init.rc b/device/rockchip/rksdk/init.rc
index b2dd2cf..8f6d9bb 100755
--- a/device/rockchip/rksdk/init.rc
+++ b/device/rockchip/rksdk/init.rc
@@ -647,4 +647,8 @@ service preinst_clr /system/bin/preinstall_cleanup.sh
 
 service getbootmode /system/bin/getbootmode.sh
     disabled
-	oneshot
+    oneshot
+
+service mousedev /system/bin/mousedev
+    class core
+    group graphics
diff --git a/frameworks/base/cmds/mousedev/Android.mk b/frameworks/base/cmds/mousedev/Android.mk
new file mode 100644
index 0000000..f6fe71c
--- /dev/null
+++ b/frameworks/base/cmds/mousedev/Android.mk
@@ -0,0 +1,56 @@
+LOCAL_PATH:= $(call my-dir)
+include $(CLEAR_VARS)
+
+LOCAL_SRC_FILES:= \
+	mouse.cpp
+
+LOCAL_SHARED_LIBRARIES := \
+	libcutils \
+	libutils \
+	libui \
+	libgui \
+	libskia \
+	libbinder
+
+LOCAL_C_INCLUDES := \
+	external/skia/include/core \
+	external/skia/include/effects \
+	external/skia/src/ports \
+	external/skia/include/utils \
+	external/skia/include/lazy \
+	external/skia/include/images
+
+LOCAL_CFLAGS := \
+	-fpermissive
+
+LOCAL_MODULE:= mousedev
+
+LOCAL_MODULE_TAGS := optional
+
+include $(BUILD_EXECUTABLE)
+
+define _add-mousedev-image
+include $$(CLEAR_VARS)
+LOCAL_MODULE := framework_base_mousedev_$(notdir $(1))
+LOCAL_MODULE_STEM := $(notdir $(1))
+_img_modules += $$(LOCAL_MODULE)
+LOCAL_SRC_FILES := $1
+LOCAL_MODULE_TAGS := optional
+LOCAL_MODULE_CLASS := ETC
+LOCAL_MODULE_PATH := $$(TARGET_ROOT_OUT)/res/images
+include $$(BUILD_PREBUILT)
+endef
+
+_img_modules :=
+_images :=
+$(foreach _img, $(call find-subdir-subdir-files, "images", "*.png"), \
+  $(eval $(call _add-mousedev-image,$(_img))))
+
+include $(CLEAR_VARS)
+LOCAL_MODULE := mousedev_res_images
+LOCAL_MODULE_TAGS := optional
+LOCAL_REQUIRED_MODULES := $(_img_modules)
+include $(BUILD_PHONY_PACKAGE)
+
+_add-mousedev-image :=
+_img_modules :=
diff --git a/frameworks/base/cmds/mousedev/images/pointer_arrow.png b/frameworks/base/cmds/mousedev/images/pointer_arrow.png
new file mode 100644
index 0000000..0745db2
Binary files /dev/null and b/frameworks/base/cmds/mousedev/images/pointer_arrow.png differ
diff --git a/frameworks/base/cmds/mousedev/mouse.cpp b/frameworks/base/cmds/mousedev/mouse.cpp
new file mode 100644
index 0000000..6362dee
--- /dev/null
+++ b/frameworks/base/cmds/mousedev/mouse.cpp
@@ -0,0 +1,388 @@
+/* this function only record mouse x,y value */
+
+#include <android/native_window.h>
+
+#include "mouse.h"
+
+Mouse::Mouse()
+{
+    FD_ZERO(&mSelectFds);
+
+    /* initialize unix socket */
+    struct sockaddr_in addr;
+    //unlink(UNIX_PATH);
+    addr.sin_family = AF_INET;
+    addr.sin_port = htons(SERVER_PORT) ; 
+    addr.sin_addr.s_addr = INADDR_ANY ; 
+    //strcpy(addr.sun_path, UNIX_PATH);
+    //unsigned int len = strlen(addr.sun_path) + sizeof(addr.sun_family);
+    int len = sizeof(struct sockaddr_in) ; 
+
+    mUnixFd = socket(AF_INET, SOCK_STREAM, 0);
+    if (mUnixFd < 0) {
+        printf("unix_fd create error\n");
+    }
+
+    int opt = 1;
+    setsockopt(mUnixFd, SOL_SOCKET,
+            SO_REUSEADDR, (const void *) &opt, sizeof(opt));
+
+    if (bind(mUnixFd, (struct sockaddr *)&addr, len) < 0) {
+        printf("unix_fd bind error\n");
+    } 
+
+    if (listen(mUnixFd, 5) < 0) {
+        printf("unix_fd listen error %d\n", errno);
+    }
+
+    FD_SET(mUnixFd, &mSelectFds);
+    if (mUnixFd > mMaxFd) {
+        mMaxFd = mUnixFd;
+    }
+
+    mDefaultBitmap = new SkBitmap();
+
+    bool result = SkImageDecoder::DecodeFile(CURSOR_IMAGE_PATH,
+            mDefaultBitmap,SkBitmap::kARGB_8888_Config, SkImageDecoder::kDecodePixels_Mode);
+
+    if (!result) {
+        printf("bitmap decode failed.\n");
+        exit(-1);
+    } else {
+        printf("bitmap decode succeed. width %d height %d\n", mDefaultBitmap->width(), mDefaultBitmap->height());
+    }
+
+    mUseDefaultBitmap = true;
+    mSurfaceComposerClient = new SurfaceComposerClient();
+
+    mWidth = mDefaultBitmap->width();
+    mHeight = mDefaultBitmap->height();
+    mSpotX = IMAGE_HOT_X;
+    mSpotY = IMAGE_HOT_Y;
+
+    mSurfaceControl = mSurfaceComposerClient->createSurface(String8("MouseDev"), mWidth, mHeight, PIXEL_FORMAT_RGBA_8888, 0);
+
+    mMove = false;
+    mUpdateCursor = true;
+    mWantChange = true;
+    mSurfaceVisible = true;
+    mIsRunning = true;
+}
+
+Mouse::~Mouse()
+{
+    delete mDefaultBitmap;
+    close(mUnixFd);
+    close(mDeviceFd);
+}
+
+int Mouse::OpenDev()
+{
+    mDeviceFd = open(DEVICE_PATH,  O_RDWR | O_CLOEXEC);
+
+    if (mDeviceFd < 0) {
+        printf("open %s failed\n", DEVICE_PATH);
+        return -1;
+    } else {
+        printf("open %s succeed\n", DEVICE_PATH);
+    }
+
+    FD_SET(mDeviceFd, &mSelectFds);
+
+    if (mDeviceFd > mMaxFd) {
+        mMaxFd = mDeviceFd;
+    }
+
+    mDeviceOpened = true;
+
+    return 0;
+}
+
+int Mouse::CloseDev()
+{
+    close(mDeviceFd);
+    FD_CLR(mDeviceFd, &mSelectFds);
+    mDeviceOpened = false;
+
+    return 0;
+}
+
+int Mouse::DrawCursor(CursorBounds desireBounds)
+{
+    status_t status;
+
+    if (mWantChange && mSurfaceVisible) {
+        SurfaceComposerClient::openGlobalTransaction();
+        status = mSurfaceControl->show();
+        if (status) {
+            printf("Error %d setting sprite surface show.\n", status);
+        }
+        SurfaceComposerClient::closeGlobalTransaction();
+        mWantChange = false;
+    }
+    if (mWantChange && !mSurfaceVisible) {
+        SurfaceComposerClient::openGlobalTransaction();
+        status = mSurfaceControl->hide();
+        if (status) {
+            printf("Error %d setting sprite surface hide.\n", status);
+        }
+        SurfaceComposerClient::closeGlobalTransaction();
+        mWantChange = false;
+    }
+        
+    if (mUpdateCursor && mSurfaceVisible) {
+        SurfaceComposerClient::openGlobalTransaction();
+
+        status = mSurfaceControl->setLayer(INT_MAX - 1);
+        if (status) {
+            printf("Error %d setting sprite surface setlayer.\n", status);
+        }
+        
+        SurfaceComposerClient::closeGlobalTransaction();
+
+        SurfaceComposerClient::openGlobalTransaction();
+
+        if (desireBounds.width != mWidth || desireBounds.height != mHeight) {
+            //SurfaceComposerClient::openGlobalTransaction();
+            status = mSurfaceControl->setSize(mWidth, mHeight);
+            if (status) {
+                printf("Error %d setting sprite surface show.\n", status);
+            }
+
+            mWidth = desireBounds.width;
+            mHeight = desireBounds.height;
+        }
+
+        SurfaceComposerClient::closeGlobalTransaction();
+
+        sp<Surface> surface = mSurfaceControl->getSurface();
+        ANativeWindow_Buffer outBuffer;
+        status = surface->lock(&outBuffer, NULL);
+        SkBitmap surfaceBitmap;
+        ssize_t bpr = outBuffer.stride * bytesPerPixel(outBuffer.format);
+        surfaceBitmap.setConfig(SkBitmap::kARGB_8888_Config,
+                outBuffer.width, outBuffer.height, bpr);
+        
+        printf("surface bpr size %d stride %d width %d height %d\n", bpr, outBuffer.stride, outBuffer.width, outBuffer.height);
+
+        SkBitmap srcBitmap;
+        bpr = desireBounds.width * bytesPerPixel(outBuffer.format);
+        srcBitmap.setConfig(SkBitmap::kARGB_8888_Config, desireBounds.width,
+                desireBounds.height, bpr);
+
+        printf("srcbitmap bpr size %d width %d height %d\n", bpr, desireBounds.width, desireBounds.height);
+
+        surfaceBitmap.setPixels(outBuffer.bits);
+        srcBitmap.setPixels(mDrawBitmaps);
+
+        SkCanvas surfaceCanvas(surfaceBitmap);
+
+        SkPaint paint;
+        paint.setXfermodeMode(SkXfermode::kSrc_Mode);
+
+        surfaceCanvas.drawBitmap(srcBitmap, 0, 0, &paint);
+
+        if (outBuffer.width > uint32_t(srcBitmap.width())) {
+            paint.setColor(0); // transparent fill color
+            surfaceCanvas.drawRectCoords(srcBitmap.width(), 0, outBuffer.width, srcBitmap.height(), paint);
+        }
+        if (outBuffer.height > uint32_t(srcBitmap.height())) {
+            paint.setColor(0); // transparent fill color
+            surfaceCanvas.drawRectCoords(0, srcBitmap.height(), outBuffer.width, outBuffer.height, paint);
+        }
+
+        status = surface->unlockAndPost();
+        if (status) {
+            printf("Error %d unlocking and posting sprite surface after drawing.\n", status);
+        }
+
+        mUpdateCursor = false;
+    }
+
+    if (mMove && mSurfaceVisible) {
+        if (desireBounds.spotX != mSpotX) {
+            mSpotX = desireBounds.spotX;
+        }
+        
+        if (desireBounds.spotY != mSpotY) {
+            mSpotY = desireBounds.spotY;
+        }
+
+        SurfaceComposerClient::openGlobalTransaction();
+
+        status = mSurfaceControl->setPosition(mPos.x - mSpotX, mPos.y - mSpotY);
+        if (status) {
+            printf("Error %d setting sprite surface position.\n", status);
+        }
+
+        SurfaceComposerClient::closeGlobalTransaction();
+        
+        mMove = false;
+    }
+
+    return 0;
+}
+
+int Mouse::Loop()
+{
+    fd_set readfds;
+    struct timeval timeout = {0, 10000};
+    bool isDeviceAdd = false;
+
+    if (access(DEVICE_PATH, 0) != 0) {
+        printf("device do not exist\n");
+        return -1;
+    }
+
+    /* open /dev/mouse */
+    OpenDev();
+
+    CursorBounds desireBounds;
+    desireBounds.width = mWidth;
+    desireBounds.height = mHeight;
+    desireBounds.spotX = mSpotX;
+    desireBounds.spotY = mSpotY;
+    
+    mDrawBitmaps = (char *)mDefaultBitmap->getPixels();
+
+    printf("now draw default cursor bitmap\n");
+    DrawCursor(desireBounds);
+    printf("finish draw default cursor bitmap\n");
+
+    while(mIsRunning)
+    {
+        readfds = mSelectFds;
+
+        int retval;
+
+        retval = select(mMaxFd + 1, &readfds, NULL, NULL, NULL);
+
+        if (retval == 0) {
+            printf("select time out\n");
+            continue;
+        }
+
+        if (FD_ISSET(mUnixFd, &readfds)) {
+            struct sockaddr_in address;
+            int addrLength;
+            int acceptFd = accept(mUnixFd, (struct sockaddr *)&address, &addrLength);
+            if (acceptFd > mMaxFd) {
+                mMaxFd = acceptFd;
+            }
+
+            mAcceptFds.add(String8("cursor"), acceptFd);
+            FD_SET(acceptFd, &mSelectFds);
+            printf("new connect accept\n");
+        }
+
+        if (FD_ISSET(mDeviceFd, &readfds)) {
+            InputPosition tmpPos;
+            bool isOK = true;
+            int read_size = read(mDeviceFd, &tmpPos, sizeof(tmpPos));;
+            if (read_size <= 0 && errno == ENODEV) {
+                printf("device is closed\n");
+                isOK = false;
+            } else if(read_size > 0 && read_size % sizeof(tmpPos) != 0) {
+                printf("read fd %d error\n", mDeviceFd);
+                isOK = false;
+            }
+
+            if (isOK) {
+                memcpy(&mPos, &tmpPos, sizeof(mPos));
+                mMove = true;
+            }
+            DrawCursor(desireBounds);
+            //printf("mouse move\n");
+        }
+
+        for (int i = 0;i < mAcceptFds.size();i++) {
+            int acceptFd = mAcceptFds.valueAt(i);
+            if (FD_ISSET(acceptFd, &readfds)) {
+                CmdHeader header;
+                int read_size;
+                read_size = read(acceptFd, &header, sizeof(CmdHeader));
+                if (read_size == 0) {
+                    printf("remote close unix socket\n");
+                    FD_CLR(acceptFd, &mSelectFds);
+                    mAcceptFds.removeItemsAt(i);
+                    close(acceptFd);
+                    mWantChange = true;
+                    mUpdateCursor = true;
+                    if (mDrawBitmaps != NULL && !mUseDefaultBitmap) {
+                        char *freeHeader = mDrawBitmaps - sizeof(CmdHeader) + sizeof(CursorBounds);
+                        free(freeHeader);
+                    }
+
+                    desireBounds.width = mDefaultBitmap->width();
+                    desireBounds.height = mDefaultBitmap->height();
+                    desireBounds.spotX = IMAGE_HOT_X;
+                    desireBounds.spotY = IMAGE_HOT_Y;
+
+                    mUseDefaultBitmap = true;
+                    mDrawBitmaps = mDefaultBitmap->getPixels();
+                    DrawCursor(desireBounds);
+                    continue;
+                }
+                char *data = (char *)malloc(sizeof(CmdHeader) + header.length);
+                memcpy(data, &header, sizeof(CmdHeader));
+                read_size = read(acceptFd, data + sizeof(CmdHeader), header.length);
+                ProcessCmd(data, sizeof(CmdHeader) + header.length, desireBounds);
+                DrawCursor(desireBounds);
+                mUseDefaultBitmap = false;
+            }
+        }
+    }
+
+    return 0;
+}
+
+bool Mouse::GetStatus()
+{
+    return mIsRunning;
+}
+
+int Mouse::ProcessCmd(char *cmd, int cmdLength, CursorBounds &desireBounds)
+{
+    CmdHeader *header = (CmdHeader *)cmd;
+    switch (header->type) {
+        case MSG_UPDATE:                           
+            memcpy(&desireBounds, cmd + sizeof(CmdHeader), sizeof(CursorBounds));
+            if (mDrawBitmaps != NULL && !mUseDefaultBitmap) {
+                char *freeHeader = mDrawBitmaps - sizeof(CmdHeader) - sizeof(CursorBounds);
+                free(freeHeader);
+            }
+            mDrawBitmaps = cmd + sizeof(CmdHeader) + sizeof(CursorBounds);
+            mUpdateCursor = true;
+            mWantChange = true;
+            printf("receive update msg width %d height %d hotx %d hoty %d\n", desireBounds.width,
+                    desireBounds.height, desireBounds.spotX, desireBounds.spotY);
+            break;
+        default:
+            printf("unknow message receive.\n");
+            break;
+    }
+
+    return 0;
+}
+
+void draw_thread(void *arg)
+{
+    Mouse *test = (Mouse *)arg;
+    test->Loop();
+}
+
+int main(int argc,char **argv)
+{
+    Mouse *test = new Mouse();
+
+    sp<ProcessState> proc(ProcessState::self());
+    proc->startThreadPool();
+
+    pthread_t pid;
+
+    pthread_create(&pid, NULL, (void *)draw_thread, test);
+
+    IPCThreadState::self()->joinThreadPool();
+    pthread_join(pid, NULL);
+    return 0;
+}
diff --git a/frameworks/base/cmds/mousedev/mouse.h b/frameworks/base/cmds/mousedev/mouse.h
new file mode 100644
index 0000000..1a5c539
--- /dev/null
+++ b/frameworks/base/cmds/mousedev/mouse.h
@@ -0,0 +1,121 @@
+#ifndef __MOUSE_H__
+#define __MOUSE_H__
+
+#include <stdio.h>
+#include <linux/input.h>
+#include <fcntl.h>
+#include <sys/time.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/inotify.h>
+
+#include <dirent.h>
+#include <linux/fb.h>
+#include <sys/mman.h>
+
+#include <utils/KeyedVector.h>
+#include <utils/List.h>
+#include <utils/String8.h>
+
+#include <binder/IPCThreadState.h>
+#include <binder/ProcessState.h>
+#include <binder/IServiceManager.h>
+
+#include <gui/Surface.h>
+#include <gui/SurfaceComposerClient.h>
+
+#include <SkCanvas.h>
+#include <SkColor.h>
+#include <SkPaint.h>
+#include <SkXfermode.h>
+#include <SkBitmap.h>
+#include <SkImageDecoder.h>
+
+#include <sys/socket.h>
+#include <netinet/in.h>
+
+#define MSG_UPDATE 0
+#define MSG_HEART 1
+
+/* input path */
+#define DEVICE_PATH "/dev/mouse"
+
+//#define UNIX_PATH "/cache/mouse_unix"
+//#define TMP_IMAGE_STORE "/cache/tmp_cursor.dat"
+
+#define CURSOR_IMAGE_PATH "/res/images/pointer_arrow.png"
+#define IMAGE_HOT_X 6
+#define IMAGE_HOT_Y 6
+
+#define DEFAULT_WIDTH (30)
+#define DEFAULT_HEIGHT  (30)
+
+/* dev max name */
+#define DEV_NAME 1024
+
+#define SERVER_PORT 10240
+
+using namespace android;
+
+typedef struct InputPosition {
+    int x;
+    int y;
+} InputPosition;
+
+typedef struct CursorBounds {
+    int width;
+    int height;
+    int spotX;
+    int spotY;
+} CursorBounds;
+
+typedef struct CmdHeader {
+    int type;
+    int length;
+} CmdHeader;
+
+class Mouse {
+    public:
+        Mouse();
+        ~Mouse();
+        /* must run in a thread */
+        int Loop();
+        int DrawCursor(CursorBounds desireBounds);
+        int ProcessCmd(char *cmd, int cmdLength, CursorBounds &desireBounds);
+        bool GetStatus();
+    private:
+        int OpenDev();
+        int CloseDev();
+
+    private:
+        KeyedVector<String8, int> mAcceptFds;
+        fd_set mSelectFds;
+
+        int mDeviceFd;
+
+        bool mDeviceOpened;
+        int mMaxFd;
+
+        bool mIsRunning;
+        sp<SurfaceControl> mSurfaceControl;
+        sp<SurfaceComposerClient> mSurfaceComposerClient;
+
+        bool mMove;
+        bool mUpdateCursor;
+        bool mWantChange;
+        bool mSurfaceVisible;
+
+        int mUnixFd;
+        InputPosition mPos;
+        int mSpotX;
+        int mSpotY;
+        int mWidth;
+        int mHeight;
+        char *mDrawBitmaps;
+        int mDrawBitmapsLength;
+
+        SkBitmap *mDefaultBitmap;
+        bool mUseDefaultBitmap;
+};
+
+#endif
diff --git a/frameworks/base/services/input/PointerController.cpp b/frameworks/base/services/input/PointerController.cpp
index 9af521b..68ddb29 100644
--- a/frameworks/base/services/input/PointerController.cpp
+++ b/frameworks/base/services/input/PointerController.cpp
@@ -33,6 +33,11 @@
 
 namespace android {
 
+struct input_position {
+    int x;
+    int y;
+};
+
 // --- PointerController ---
 
 // Time to wait before starting the fade when the pointer is inactive.
@@ -180,6 +185,23 @@ void PointerController::setPositionLocked(float x, float y) {
         } else {
             mLocked.pointerY = y;
         }
+
+        if (access("/dev/mouse", 0) == 0) {
+            struct input_position pos;
+
+            pos.x = mLocked.pointerX;
+            pos.y = mLocked.pointerY;
+
+            int fd = open("/dev/mouse", O_RDWR);
+            //ALOGD("write pos x: %d y: %d fd %d", pos.x, pos.y, fd);
+            if (fd != 0) {
+                write(fd, &pos, sizeof(pos));
+                close(fd);
+            }
+        } else {
+            ALOGD("/dev/mouse do not exist");
+        }
+
         updatePointerLocked();
     }
 }
